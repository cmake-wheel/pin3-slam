name: Test Wheel packaging

on: ["push", "pull_request"]

jobs:
  build_wheels:
    name: "Build ${{ matrix.build }} wheels on ${{ matrix.os }} ${{ matrix.arch }}"
    runs-on: "${{ matrix.os }}-latest"
    strategy:
      matrix:
        os: ["ubuntu"]
        arch: ["x86_64"]
        build: ["cp37-*", "cp38-*", "cp39-*", "cp310-*"]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Set up QEMU
        if: matrix.arch == 'aarch64'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all
      - run: python -m pip install -U pip
      - run: python -m pip install cibuildwheel
      - run: touch setup.py
        if: matrix.arch == 'aarch64'
      - run: python -m cibuildwheel --output-dir wh
        env:
          CIBW_BUILD: ${{ matrix.build }}
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_SKIP: "*musl*"
          CIBW_MANYLINUX_X86_64_IMAGE: "quay.io/pypa/manylinux2014_x86_64"
          CIBW_MANYLINUX_PYPY_X86_64_IMAGE: "quay.io/pypa/manylinux2014_x86_64"
          CIBW_MANYLINUX_AARCH64_IMAGE: "quay.io/pypa/manylinux_2_28_aarch64"
          CIBW_REPAIR_WHEEL_COMMAND: ""
          CIBW_ENVIRONMENT: CMEEL_JOBS="2" CMEEL_RUN_TESTS="OFF"
      - uses: actions/upload-artifact@v3
        with:
          path: wh

  test:
    needs: ["build_wheels"]
    name: "Test python ${{ matrix.python }} on ${{ matrix.os }}"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ["3.7", "3.8", "3.9", "3.10"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - uses: actions/download-artifact@v3
      - name: setup
        run: |
          python -m pip install -U pip
          python -m pip install -U wheel simple503
          python -m simple503 --sort --base-url "${{ github.workspace }}/artifact" artifact
      - name: install wheel
        run: python -m pip install -i "file://${{ github.workspace }}/artifact" pin
      - name: test
        run: python -c "import pinocchio; assert str(pinocchio.SE3.Identity().inverse()) == '  R =\n1 0 0\n0 1 0\n0 0 1\n  p = -0 -0 -0\n'"
        env:
          PYTHONWARNINGS: error
      - name: test
        run: python -c "import casadi; from pinocchio import casadi as cpin"
        env:
          PYTHONWARNINGS: error
